#pragma once

#include <cstring>
#include <unordered_map>

namespace lf
{

namespace logic
{

enum E_LF_GATE_TYPE
{
  E_LF_GATE_TYPE_UNKNOW = 0,
  E_LF_GATE_TYPE_ZERO,
  E_LF_GATE_TYPE_ONE,
  E_LF_GATE_TYPE_BUF,
  E_LF_GATE_TYPE_NOT,
  E_LF_GATE_TYPE_AND2,
  E_LF_GATE_TYPE_NAND2,
  E_LF_GATE_TYPE_OR2,
  E_LF_GATE_TYPE_NOR2,
  E_LF_GATE_TYPE_XOR2,
  E_LF_GATE_TYPE_XNOR2,
  E_LF_GATE_TYPE_MAJ3,
  E_LF_GATE_TYPE_XOR3,
  E_LF_GATE_TYPE_NAND3,
  E_LF_GATE_TYPE_NOR3,
  E_LF_GATE_TYPE_MUX21,
  E_LF_GATE_TYPE_NMUX21,
  E_LF_GATE_TYPE_AOI21,
  E_LF_GATE_TYPE_OAI21,
  E_LF_GATE_TYPE_AXI21,
  E_LF_GATE_TYPE_XAI21,
  E_LF_GATE_TYPE_OXI21,
  E_LF_GATE_TYPE_XOI21,
  E_LF_GATE_TYPE_BLOCK,
  E_LF_GATE_TYPE_LUT,  // fpga
  E_LF_GATE_TYPE_CELL, // asic
};

static const std::unordered_map<std::string, E_LF_GATE_TYPE> GATE_TYPE_MAP = {
    { "zero", E_LF_GATE_TYPE::E_LF_GATE_TYPE_ZERO },
    { "one", E_LF_GATE_TYPE::E_LF_GATE_TYPE_ONE },
    { "buf", E_LF_GATE_TYPE::E_LF_GATE_TYPE_BUF },
    { "not", E_LF_GATE_TYPE::E_LF_GATE_TYPE_NOT },
    { "and2", E_LF_GATE_TYPE::E_LF_GATE_TYPE_AND2 },
    { "nand2", E_LF_GATE_TYPE::E_LF_GATE_TYPE_NAND2 },
    { "or2", E_LF_GATE_TYPE::E_LF_GATE_TYPE_OR2 },
    { "nor2", E_LF_GATE_TYPE::E_LF_GATE_TYPE_NOR2 },
    { "xor2", E_LF_GATE_TYPE::E_LF_GATE_TYPE_XOR2 },
    { "xnor2", E_LF_GATE_TYPE::E_LF_GATE_TYPE_XNOR2 },
    { "maj3", E_LF_GATE_TYPE::E_LF_GATE_TYPE_MAJ3 },
    { "xor3", E_LF_GATE_TYPE::E_LF_GATE_TYPE_XOR3 },
    { "nand3", E_LF_GATE_TYPE::E_LF_GATE_TYPE_NAND3 },
    { "nor3", E_LF_GATE_TYPE::E_LF_GATE_TYPE_NOR3 },
    { "mux21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_MUX21 },
    { "nmux21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_NMUX21 },
    { "aoi21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_AOI21 },
    { "oai21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_OAI21 },
    { "axi21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_AXI21 },
    { "xai21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_XAI21 },
    { "oxi21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_OXI21 },
    { "xoi21", E_LF_GATE_TYPE::E_LF_GATE_TYPE_XOI21 },
    { "block", E_LF_GATE_TYPE::E_LF_GATE_TYPE_BLOCK },
    { "lut", E_LF_GATE_TYPE::E_LF_GATE_TYPE_LUT },
    { "cell", E_LF_GATE_TYPE::E_LF_GATE_TYPE_CELL } };

enum E_LF_CONVERT_TYPE
{
  E_LF_CONVERT_TYPE_UNKONW = 0,
  E_LF_CONVERT_TYPE_ABC,
  E_LF_CONVERT_TYPE_AIG,
  E_LF_CONVERT_TYPE_OIG,
  E_LF_CONVERT_TYPE_AOG,
  E_LF_CONVERT_TYPE_XAG,
  E_LF_CONVERT_TYPE_XOG,
  E_LF_CONVERT_TYPE_MIG,
  E_LF_CONVERT_TYPE_XMG,
  E_LF_CONVERT_TYPE_PRIMARY,
  E_LF_CONVERT_TYPE_GTG,
};

static const std::unordered_map<std::string, E_LF_CONVERT_TYPE> CONVERT_TYPE_MAP = {
    { "abc", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_ABC },
    { "aig", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_AIG },
    { "oig", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_OIG },
    { "aog", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_AOG },
    { "xag", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_XAG },
    { "xog", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_XOG },
    { "mig", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_MIG },
    { "xmg", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_XMG },
    { "primary", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_PRIMARY },
    { "gtg", E_LF_CONVERT_TYPE::E_LF_CONVERT_TYPE_GTG } };

} // namespace logic
} // namespace lf